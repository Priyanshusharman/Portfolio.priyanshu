'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var validateProgressValue = function validateProgressValue(value) {
  var progress = value;
  if (value > 100) {
    progress = 100;
  } else if (value < 0) {
    progress = 0;
  }
  return progress;
};

var getHeight = function getHeight(element) {
  var e = element;
  while (e.className !== 'timeline-block' && e.parentElement) {
    e = element.parentElement;
  }
  return e && e.offsetHeight;
};

var getPosition = function getPosition(e) {
  // e = Mouse click event.
  var rect = e.target.getBoundingClientRect();
  var x = e.clientX - rect.left; // x position within the element.
  var y = e.clientY - rect.top; // y position within the element.
  return { x: x, y: y };
};

var Timeline = function (_React$Component) {
  _inherits(Timeline, _React$Component);

  function Timeline(props) {
    _classCallCheck(this, Timeline);

    var _this = _possibleConstructorReturn(this, (Timeline.__proto__ || Object.getPrototypeOf(Timeline)).call(this, props));

    _this.handleProgressClick = _this.handleProgressClick.bind(_this);

    _this.state = {
      progress: validateProgressValue(props.progress)
    };
    return _this;
  }

  _createClass(Timeline, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      this.setState({
        progress: validateProgressValue(nextProps.progress)
      });
    }
  }, {
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        height: this.props.height,
        progress: this.state.progress
      };
    }
  }, {
    key: 'handleProgressClick',
    value: function handleProgressClick(e) {
      var parentPosition = getPosition(e);
      var progress = parentPosition.y / getHeight(e.currentTarget) * 100;
      this.props.onSelect(progress);
      e.stopPropagation();
      e.preventDefault();
    }
  }, {
    key: 'render',
    value: function render() {
      var progressStyle = {
        height: this.state.progress + '%'
      };
      var wrapperStyle = {
        height: this.props.height + 'px'
      };

      return _react2.default.createElement(
        'div',
        { className: 'timeline-block', style: wrapperStyle },
        _react2.default.createElement('div', {
          className: 'timeline-line',
          onClick: this.handleProgressClick
        }),
        _react2.default.createElement('div', {
          className: 'timeline-progress',
          onClick: this.handleProgressClick,
          style: progressStyle
        }),
        this.props.children
      );
    }
  }]);

  return Timeline;
}(_react2.default.Component);

exports.default = Timeline;


Timeline.propTypes = process.env.NODE_ENV !== "production" ? {
  children: _propTypes2.default.node,
  height: _propTypes2.default.number.isRequired,
  onSelect: _propTypes2.default.func,
  progress: _propTypes2.default.number
} : {};

Timeline.defaultProps = {
  onSelect: function onSelect() {},
  progress: 0,
  children: []
};

Timeline.childContextTypes = {
  height: _propTypes2.default.number,
  progress: _propTypes2.default.number
};